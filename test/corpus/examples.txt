====
examples_error_handling_real_world
====

app [main!] {
    cli: platform "https://github.com/roc-lang/basic-cli/releases/download/0.19.0/Hj-J_zxz7V9YurCSTFcFdu6cQJie4guzsPMUi5kBYUk.tar.br",
}

import cli.Stdout
import cli.Arg exposing [Arg]
import cli.Env
import cli.Http
import cli.Dir
import cli.Utc exposing [Utc]
import cli.Path exposing [Path]

usage = "HELLO=1 roc main.roc -- \"https://www.roc-lang.org\" roc.html"

main! : List Arg => Result {} _
main! = |args|

    # Get time since [Unix Epoch](https://en.wikipedia.org/wiki/Unix_time)
    start_time : Utc
    start_time = Utc.now!({})

    # Read the HELLO environment variable
    hello_env : Str
    hello_env =
        read_env_var!("HELLO")?
        |> |env_var_content|
            if Str.is_empty(env_var_content) then
                "was empty"
            else
                "was set to ${env_var_content}"

    Stdout.line!("HELLO env var ${hello_env}")?

    # Read command line arguments
    { url, output_path } = parse_args!(args)?

    Stdout.line!("Fetching content from ${url}...")?

    # Fetch the provided url using HTTP
    html_str : Str
    html_str = fetch_html!(url)?

    Stdout.line!("Saving url HTML to ${Path.display(output_path)}...")?

    # Write HTML string to a file
    Result.map_err(
        Path.write_utf8!(html_str, output_path),
        |_| FailedToWriteFile("Failed to write to file ${Path.display(output_path)}, usage: ${usage}"),
    )?

    # Print contents of current working directory
    list_cwd_contents!({})?

    end_time : Utc
    end_time = Utc.now!({})

    run_duration = Utc.delta_as_millis(start_time, end_time)

    Stdout.line!("Run time: ${Num.to_str(run_duration)} ms")?

    Stdout.line!("Done")?

    Ok({})

parse_args! : List Arg => Result { url : Str, output_path : Path } _
parse_args! = |args|
    when List.map(args, Arg.display) is
        [_, first, second, ..] ->
            Ok({ url: first, output_path: Path.from_str(second) })

        _ ->
            Err(FailedToReadArgs("Failed to read command line arguments, usage: ${usage}"))

read_env_var! : Str => Result Str []
read_env_var! = |env_var_name|
    when Env.var!(env_var_name) is
        Ok(env_var_str) if !Str.is_empty(env_var_str) -> Ok(env_var_str)
        _ -> Ok("")

fetch_html! : Str => Result Str _
fetch_html! = |url|
    Http.get_utf8!(url)
    |> Result.map_err(|err| FailedToFetchHtml("Failed to fetch URL ${Inspect.to_str(err)}, usage: ${usage}"))

# effects need to be functions so we use the empty input type `{}`
list_cwd_contents! : {} => Result {} _
list_cwd_contents! = |_|

    dir_contents =
        Result.map_err(
            Dir.list!("."),
            |_| FailedToListCwd("Failed to list contents of current directory, usage: ${usage}"),
        )?

    contents_str =
        dir_contents
        |> List.map(Path.display)
        |> Str.join_with(",")

    Stdout.line!("Contents of current directory: ${contents_str}")
----

(file
  (app_header
    (provides_list
      (ident
        (_)))
    (packages_list
      (platform_ref
        (identifier)
        (package_uri))))
  (import_expr
    (import_ident
      (identifier)
      (module)))
  (import_expr
    (import_ident
      (identifier)
      (module))
    (exposing
      (ident)))
  (import_expr
    (import_ident
      (identifier)
      (module)))
  (import_expr
    (import_ident
      (identifier)
      (module)))
  (import_expr
    (import_ident
      (identifier)
      (module)))
  (import_expr
    (import_ident
      (identifier)
      (module))
    (exposing
      (ident)))
  (import_expr
    (import_ident
      (identifier)
      (module))
    (exposing
      (ident)))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier)))
    (expr_body
      (const
        (string
          (escape_char)
          (escape_char)))))
  (value_declaration
    (annotation_type_def
      (annotation_pre_colon
        (identifier))
      (function_type
        (apply_type
          (concrete_type)
          (apply_type_arg
            (apply_type
              (concrete_type))))
        (fat_arrow)
        (apply_type
          (concrete_type)
          (apply_type_arg
            (record_type))
          (apply_type_arg
            (inferred)))))
    (decl_left
      (identifier_pattern
        (identifier)))
    (expr_body
      (anon_fun_expr
        (argument_patterns
          (identifier_pattern
            (identifier)))
        (expr_body
          (line_comment)
          (value_declaration
            (annotation_type_def
              (annotation_pre_colon
                (identifier))
              (apply_type
                (concrete_type)))
            (decl_left
              (identifier_pattern
                (identifier)))
            (expr_body
              (function_call_pnc_expr
                (variable_expr
                  (module)
                  (identifier))
                (record_expr))))
          (line_comment)
          (value_declaration
            (annotation_type_def
              (annotation_pre_colon
                (identifier))
              (apply_type
                (concrete_type)))
            (decl_left
              (identifier_pattern
                (identifier)))
            (expr_body
              (bin_op_expr
                (suffix_op_expr
                  (function_call_pnc_expr
                    (variable_expr
                      (identifier))
                    (const
                      (string)))
                  (suffix_operator))
                (operator)
                (anon_fun_expr
                  (argument_patterns
                    (identifier_pattern
                      (identifier)))
                  (expr_body
                    (if_expr
                      (function_call_pnc_expr
                        (variable_expr
                          (module)
                          (identifier))
                        (variable_expr
                          (identifier)))
                      (then
                        (expr_body
                          (const
                            (string))))
                      (else
                        (expr_body
                          (const
                            (string
                              (interpolation_char
                                (variable_expr
                                  (identifier)))))))))))))
          (suffix_op_expr
            (function_call_pnc_expr
              (variable_expr
                (module)
                (identifier))
              (const
                (string
                  (interpolation_char
                    (variable_expr
                      (identifier))))))
            (suffix_operator))
          (line_comment)
          (value_declaration
            (decl_left
              (record_pattern
                (record_field_pattern
                  (field_name))
                (record_field_pattern
                  (field_name))))
            (expr_body
              (suffix_op_expr
                (function_call_pnc_expr
                  (variable_expr
                    (identifier))
                  (variable_expr
                    (identifier)))
                (suffix_operator))))
          (suffix_op_expr
            (function_call_pnc_expr
              (variable_expr
                (module)
                (identifier))
              (const
                (string
                  (interpolation_char
                    (variable_expr
                      (identifier))))))
            (suffix_operator))
          (line_comment)
          (value_declaration
            (annotation_type_def
              (annotation_pre_colon
                (identifier))
              (apply_type
                (concrete_type)))
            (decl_left
              (identifier_pattern
                (identifier)))
            (expr_body
              (suffix_op_expr
                (function_call_pnc_expr
                  (variable_expr
                    (identifier))
                  (variable_expr
                    (identifier)))
                (suffix_operator))))
          (suffix_op_expr
            (function_call_pnc_expr
              (variable_expr
                (module)
                (identifier))
              (const
                (string
                  (interpolation_char
                    (function_call_pnc_expr
                      (variable_expr
                        (module)
                        (identifier))
                      (variable_expr
                        (identifier)))))))
            (suffix_operator))
          (line_comment)
          (suffix_op_expr
            (function_call_pnc_expr
              (variable_expr
                (module)
                (identifier))
              (function_call_pnc_expr
                (variable_expr
                  (module)
                  (identifier))
                (variable_expr
                  (identifier))
                (variable_expr
                  (identifier)))
              (anon_fun_expr
                (argument_patterns
                  (wildcard_pattern))
                (expr_body
                  (function_call_pnc_expr
                    (tag_expr
                      (tag))
                    (const
                      (string
                        (interpolation_char
                          (function_call_pnc_expr
                            (variable_expr
                              (module)
                              (identifier))
                            (variable_expr
                              (identifier))))
                        (interpolation_char
                          (variable_expr
                            (identifier)))))))))
            (suffix_operator))
          (line_comment)
          (suffix_op_expr
            (function_call_pnc_expr
              (variable_expr
                (identifier))
              (record_expr))
            (suffix_operator))
          (value_declaration
            (annotation_type_def
              (annotation_pre_colon
                (identifier))
              (apply_type
                (concrete_type)))
            (decl_left
              (identifier_pattern
                (identifier)))
            (expr_body
              (function_call_pnc_expr
                (variable_expr
                  (module)
                  (identifier))
                (record_expr))))
          (value_declaration
            (decl_left
              (identifier_pattern
                (identifier)))
            (expr_body
              (function_call_pnc_expr
                (variable_expr
                  (module)
                  (identifier))
                (variable_expr
                  (identifier))
                (variable_expr
                  (identifier)))))
          (suffix_op_expr
            (function_call_pnc_expr
              (variable_expr
                (module)
                (identifier))
              (const
                (string
                  (interpolation_char
                    (function_call_pnc_expr
                      (variable_expr
                        (module)
                        (identifier))
                      (variable_expr
                        (identifier)))))))
            (suffix_operator))
          (suffix_op_expr
            (function_call_pnc_expr
              (variable_expr
                (module)
                (identifier))
              (const
                (string)))
            (suffix_operator))
          (function_call_pnc_expr
            (tag_expr
              (tag))
            (record_expr))))))
  (value_declaration
    (annotation_type_def
      (annotation_pre_colon
        (identifier))
      (function_type
        (apply_type
          (concrete_type)
          (apply_type_arg
            (apply_type
              (concrete_type))))
        (fat_arrow)
        (apply_type
          (concrete_type)
          (apply_type_arg
            (record_type
              (record_field_type
                (field_name)
                (apply_type
                  (concrete_type)))
              (record_field_type
                (field_name)
                (apply_type
                  (concrete_type)))))
          (apply_type_arg
            (inferred)))))
    (decl_left
      (identifier_pattern
        (identifier)))
    (expr_body
      (anon_fun_expr
        (argument_patterns
          (identifier_pattern
            (identifier)))
        (expr_body
          (when_is_expr
            (when)
            (function_call_pnc_expr
              (variable_expr
                (module)
                (identifier))
              (variable_expr
                (identifier))
              (variable_expr
                (module)
                (identifier)))
            (is)
            (when_is_branch
              (list_pattern
                (wildcard_pattern)
                (identifier_pattern
                  (identifier))
                (identifier_pattern
                  (identifier))
                (spread_pattern))
              (arrow)
              (expr_body
                (function_call_pnc_expr
                  (tag_expr
                    (tag))
                  (record_expr
                    (record_field_expr
                      (field_name)
                      (expr_body
                        (variable_expr
                          (identifier))))
                    (record_field_expr
                      (field_name)
                      (expr_body
                        (function_call_pnc_expr
                          (variable_expr
                            (module)
                            (identifier))
                          (variable_expr
                            (identifier)))))))))
            (when_is_branch
              (wildcard_pattern)
              (arrow)
              (expr_body
                (function_call_pnc_expr
                  (tag_expr
                    (tag))
                  (function_call_pnc_expr
                    (tag_expr
                      (tag))
                    (const
                      (string
                        (interpolation_char
                          (variable_expr
                            (identifier))))))))))))))
  (value_declaration
    (annotation_type_def
      (annotation_pre_colon
        (identifier))
      (function_type
        (apply_type
          (concrete_type))
        (fat_arrow)
        (apply_type
          (concrete_type)
          (apply_type_arg
            (apply_type
              (concrete_type)
              (apply_type_arg
                (tags_type)))))))
    (decl_left
      (identifier_pattern
        (identifier)))
    (expr_body
      (anon_fun_expr
        (argument_patterns
          (identifier_pattern
            (identifier)))
        (expr_body
          (when_is_expr
            (when)
            (function_call_pnc_expr
              (variable_expr
                (module)
                (identifier))
              (variable_expr
                (identifier)))
            (is)
            (when_is_branch
              (tag_pattern
                (tag)
                (identifier_pattern
                  (identifier)))
              (if
                (function_call_pnc_expr
                  (prefixed_expression
                    (variable_expr
                      (module)
                      (identifier)))
                  (variable_expr
                    (identifier))))
              (arrow)
              (expr_body
                (function_call_pnc_expr
                  (tag_expr
                    (tag))
                  (variable_expr
                    (identifier)))))
            (when_is_branch
              (wildcard_pattern)
              (arrow)
              (expr_body
                (function_call_pnc_expr
                  (tag_expr
                    (tag))
                  (const
                    (string))))))))))
  (value_declaration
    (annotation_type_def
      (annotation_pre_colon
        (identifier))
      (function_type
        (apply_type
          (concrete_type))
        (fat_arrow)
        (apply_type
          (concrete_type)
          (apply_type_arg
            (apply_type
              (concrete_type)
              (apply_type_arg
                (inferred)))))))
    (decl_left
      (identifier_pattern
        (identifier)))
    (expr_body
      (anon_fun_expr
        (argument_patterns
          (identifier_pattern
            (identifier)))
        (expr_body
          (bin_op_expr
            (function_call_pnc_expr
              (variable_expr
                (module)
                (identifier))
              (variable_expr
                (identifier)))
            (operator)
            (function_call_pnc_expr
              (variable_expr
                (module)
                (identifier))
              (anon_fun_expr
                (argument_patterns
                  (identifier_pattern
                    (identifier)))
                (expr_body
                  (function_call_pnc_expr
                    (tag_expr
                      (tag))
                    (const
                      (string
                        (interpolation_char
                          (function_call_pnc_expr
                            (variable_expr
                              (module)
                              (identifier))
                            (variable_expr
                              (identifier))))
                        (interpolation_char
                          (variable_expr
                            (identifier))))))))))))))
  (line_comment)
  (annotation_type_def
    (annotation_pre_colon
      (identifier))
    (function_type
      (record_type)
      (fat_arrow)
      (apply_type
        (concrete_type)
        (apply_type_arg
          (record_type))
        (apply_type_arg
          (inferred)))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier)))
    (expr_body
      (anon_fun_expr
        (argument_patterns
          (wildcard_pattern))
        (expr_body
          (value_declaration
            (decl_left
              (identifier_pattern
                (identifier)))
            (expr_body
              (suffix_op_expr
                (function_call_pnc_expr
                  (variable_expr
                    (module)
                    (identifier))
                  (function_call_pnc_expr
                    (variable_expr
                      (module)
                      (identifier))
                    (const
                      (string)))
                  (anon_fun_expr
                    (argument_patterns
                      (wildcard_pattern))
                    (expr_body
                      (function_call_pnc_expr
                        (tag_expr
                          (tag))
                        (const
                          (string
                            (interpolation_char
                              (variable_expr
                                (identifier)))))))))
                (suffix_operator))))
          (value_declaration
            (decl_left
              (identifier_pattern
                (identifier)))
            (expr_body
              (bin_op_expr
                (variable_expr
                  (identifier))
                (operator)
                (function_call_pnc_expr
                  (variable_expr
                    (module)
                    (identifier))
                  (variable_expr
                    (module)
                    (identifier)))
                (operator)
                (function_call_pnc_expr
                  (variable_expr
                    (module)
                    (identifier))
                  (const
                    (string))))))
          (function_call_pnc_expr
            (variable_expr
              (module)
              (identifier))
            (const
              (string
                (interpolation_char
                  (variable_expr
                    (identifier)))))))))))

====
examples_basic_cli_countdown
====

app [main!] { pf: platform "../platform/main.roc" }

# To run this example: check the README.md in this folder

import pf.Stdin
import pf.Stdout

main! = |_args|
    Stdout.line!("\nLet's count down from 3 together - all you have to do is press <ENTER>.")?
    _ = Stdin.line!({})
    tick!(3)

tick! = |n|
    if n == 0 then
        Stdout.line!("🎉 SURPRISE! Happy Birthday! 🎂")?
        Ok({})
    else
        Stdout.line!("${Num.to_str(n)}...")?
        _ = Stdin.line!({})
        tick!(n - 1)
----

(file
  (app_header
    (provides_list
      (ident
        (_)))
    (packages_list
      (platform_ref
        (identifier)
        (package_uri))))
  (line_comment)
  (import_expr
    (import_ident
      (identifier)
      (module)))
  (import_expr
    (import_ident
      (identifier)
      (module)))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier)))
    (expr_body
      (anon_fun_expr
        (argument_patterns
          (identifier_pattern
            (identifier)))
        (expr_body
          (suffix_op_expr
            (function_call_pnc_expr
              (variable_expr
                (module)
                (identifier))
              (const
                (string
                  (escape_char))))
            (suffix_operator))
          (value_declaration
            (decl_left
              (wildcard_pattern))
            (expr_body
              (function_call_pnc_expr
                (variable_expr
                  (module)
                  (identifier))
                (record_expr))))
          (function_call_pnc_expr
            (variable_expr
              (identifier))
            (const
              (int)))))))
  (value_declaration
    (decl_left
      (identifier_pattern
        (identifier)))
    (expr_body
      (anon_fun_expr
        (argument_patterns
          (identifier_pattern
            (identifier)))
        (expr_body
          (if_expr
            (bin_op_expr
              (variable_expr
                (identifier))
              (operator)
              (const
                (int)))
            (then
              (expr_body
                (suffix_op_expr
                  (function_call_pnc_expr
                    (variable_expr
                      (module)
                      (identifier))
                    (const
                      (string)))
                  (suffix_operator))
                (function_call_pnc_expr
                  (tag_expr
                    (tag))
                  (record_expr))))
            (else
              (expr_body
                (suffix_op_expr
                  (function_call_pnc_expr
                    (variable_expr
                      (module)
                      (identifier))
                    (const
                      (string
                        (interpolation_char
                          (function_call_pnc_expr
                            (variable_expr
                              (module)
                              (identifier))
                            (variable_expr
                              (identifier)))))))
                  (suffix_operator))
                (value_declaration
                  (decl_left
                    (wildcard_pattern))
                  (expr_body
                    (function_call_pnc_expr
                      (variable_expr
                        (module)
                        (identifier))
                      (record_expr))))
                (function_call_pnc_expr
                  (variable_expr
                    (identifier))
                  (bin_op_expr
                    (variable_expr
                      (identifier))
                    (operator)
                    (const
                      (int))))))))))))
